/*
 * Copyright (C) 2021 adrian_007, adrian-007 on o2 point pl
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#pragma once

#include "Flash.h"

#include <stdint.h>

namespace ThermometerFont
{
	static const flash<uint8_t> PROGMEM data[] {
        0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char -
        0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0xC7, 0x01, 0x00, 0x00, 0x83, 0x01, 0x00, 0x00, 0x83, 0x01, 0x00, 0x00, 0x83, 0x01, 0x00, 0x00, 0xC7, 0x01, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char degree
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char space
        0x17, 0x00, 0xF8, 0x3F, 0x00, 0x80, 0xFF, 0xFF, 0x01, 0xE0, 0xFF, 0xFF, 0x07, 0xF0, 0xFF, 0xFF, 0x1F, 0xF8, 0xFF, 0xFF, 0x3F, 0xFC, 0x07, 0xFC, 0x3F, 0xFE, 0x00, 0x7E, 0x7F, 0x7E, 0x00, 0x3F, 0x7C, 0x3F, 0x80, 0x1F, 0xFC, 0x1F, 0x80, 0x0F, 0xF8, 0x1F, 0xC0, 0x0F, 0xF8, 0x1F, 0xE0, 0x07, 0xF8, 0x1F, 0xF0, 0x03, 0xF8, 0x1F, 0xF0, 0x01, 0xF8, 0x3F, 0xF8, 0x01, 0xFC, 0x3E, 0xFC, 0x00, 0x7E, 0xFE, 0x7E, 0x00, 0x7F, 0xFC, 0x3F, 0xE0, 0x3F, 0xFC, 0xFF, 0xFF, 0x1F, 0xF8, 0xFF, 0xFF, 0x0F, 0xE0, 0xFF, 0xFF, 0x07, 0x80, 0xFF, 0xFF, 0x01, 0x00, 0xFC, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 0
        0x16, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x7C, 0xE0, 0x07, 0x00, 0x7C, 0xF0, 0x03, 0x00, 0x7C, 0xF0, 0x03, 0x00, 0x7C, 0xF8, 0x01, 0x00, 0x7C, 0xF8, 0x01, 0x00, 0x7C, 0xFC, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7C, 0xFE, 0xFF, 0xFF, 0x7F, 0xFE, 0xFF, 0xFF, 0x7F, 0xFE, 0xFF, 0xFF, 0x7F, 0xFE, 0xFF, 0xFF, 0x7F, 0xFE, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 1
        0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x78, 0x38, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x7E, 0xFC, 0x00, 0x00, 0x7F, 0x7E, 0x00, 0x80, 0x7F, 0x3E, 0x00, 0xC0, 0x7F, 0x3F, 0x00, 0xE0, 0x7F, 0x1F, 0x00, 0xF0, 0x7F, 0x1F, 0x00, 0xF8, 0x7D, 0x1F, 0x00, 0xFC, 0x7C, 0x1F, 0x00, 0x7E, 0x7C, 0x1F, 0x80, 0x3F, 0x7C, 0x3F, 0xC0, 0x1F, 0x7C, 0x7E, 0xF0, 0x0F, 0x7C, 0xFE, 0xFF, 0x07, 0x7C, 0xFC, 0xFF, 0x03, 0x7C, 0xFC, 0xFF, 0x01, 0x7C, 0xF0, 0x7F, 0x00, 0x7C, 0xC0, 0x0F, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 2
        0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x3E, 0x00, 0x00, 0x7C, 0x3E, 0x00, 0x00, 0xF8, 0x1F, 0xE0, 0x03, 0xF8, 0x1F, 0xE0, 0x03, 0xF8, 0x1F, 0xE0, 0x03, 0xF8, 0x1F, 0xE0, 0x03, 0xF8, 0x1F, 0xE0, 0x03, 0xF8, 0x1F, 0xE0, 0x03, 0xF8, 0x1F, 0xF0, 0x03, 0xF8, 0x3F, 0xF0, 0x03, 0xF8, 0x7F, 0xF8, 0x07, 0x7C, 0xFE, 0xFF, 0x07, 0x7C, 0xFE, 0xBF, 0x0F, 0x7E, 0xFC, 0xBF, 0xFF, 0x3F, 0xF8, 0x1F, 0xFF, 0x3F, 0xE0, 0x07, 0xFE, 0x1F, 0x00, 0x00, 0xFC, 0x0F, 0x00, 0x00, 0xF8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 3
        0x18, 0x00, 0x00, 0xF8, 0x01, 0x00, 0x00, 0xFC, 0x01, 0x00, 0x00, 0xFF, 0x01, 0x00, 0xC0, 0xFF, 0x01, 0x00, 0xE0, 0xFF, 0x01, 0x00, 0xF8, 0xFF, 0x01, 0x00, 0xFE, 0xF3, 0x01, 0x00, 0xFF, 0xF1, 0x01, 0xC0, 0x7F, 0xF0, 0x01, 0xE0, 0x3F, 0xF0, 0x01, 0xF8, 0x0F, 0xF0, 0x01, 0xFE, 0x03, 0xF0, 0x01, 0xFE, 0x01, 0xF0, 0x01, 0x7E, 0x00, 0xF0, 0x01, 0xFE, 0xFF, 0xFF, 0x7F, 0xFE, 0xFF, 0xFF, 0x7F, 0xFE, 0xFF, 0xFF, 0x7F, 0xFE, 0xFF, 0xFF, 0x7F, 0xFE, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x00, 0xF0, 0x01,  // Code for char 4
        0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xFE, 0xFF, 0x03, 0x7C, 0xFE, 0xFF, 0x03, 0xF8, 0xFE, 0xFF, 0x03, 0xF8, 0xFE, 0xFF, 0x03, 0xF8, 0xFE, 0xFF, 0x03, 0xF8, 0x3E, 0xE0, 0x03, 0xF8, 0x3E, 0xE0, 0x03, 0xF8, 0x3E, 0xE0, 0x03, 0xF8, 0x3E, 0xE0, 0x03, 0xF8, 0x3E, 0xE0, 0x03, 0xF8, 0x3E, 0xE0, 0x07, 0x7C, 0x3E, 0xE0, 0x07, 0x7C, 0x3E, 0xC0, 0x0F, 0x3F, 0x3E, 0xC0, 0xFF, 0x3F, 0x3E, 0x80, 0xFF, 0x1F, 0x3E, 0x80, 0xFF, 0x0F, 0x00, 0x00, 0xFE, 0x07, 0x00, 0x00, 0xF8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 5
        0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x00, 0x00, 0xFE, 0xFF, 0x07, 0x80, 0xFF, 0xFF, 0x0F, 0xE0, 0xFF, 0xFF, 0x3F, 0xF0, 0xFF, 0xFF, 0x3F, 0xF0, 0xE7, 0x83, 0x7F, 0xF8, 0xE1, 0x03, 0x7E, 0xFC, 0xF0, 0x01, 0xFC, 0x7C, 0xF0, 0x01, 0xF8, 0x7C, 0xF0, 0x01, 0xF8, 0x3C, 0xF0, 0x01, 0xF8, 0x3E, 0xF0, 0x01, 0xF8, 0x3E, 0xF0, 0x01, 0xF8, 0x3E, 0xF0, 0x03, 0xFC, 0x3E, 0xF0, 0x03, 0x7C, 0x3E, 0xE0, 0x07, 0x7F, 0x3E, 0xE0, 0xFF, 0x3F, 0x3E, 0xC0, 0xFF, 0x3F, 0x3E, 0x80, 0xFF, 0x1F, 0x00, 0x00, 0xFF, 0x07, 0x00, 0x00, 0xFC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 6
        0x16, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x60, 0x3E, 0x00, 0x00, 0x78, 0x3E, 0x00, 0x00, 0x7E, 0x3E, 0x00, 0x80, 0x7F, 0x3E, 0x00, 0xE0, 0x7F, 0x3E, 0x00, 0xF8, 0x7F, 0x3E, 0x00, 0xFE, 0x3F, 0x3E, 0x80, 0xFF, 0x0F, 0x3E, 0xF0, 0xFF, 0x03, 0x3E, 0xFC, 0xFF, 0x00, 0x3E, 0xFF, 0x1F, 0x00, 0xFE, 0xFF, 0x07, 0x00, 0xFE, 0xFF, 0x01, 0x00, 0xFE, 0x7F, 0x00, 0x00, 0xFE, 0x1F, 0x00, 0x00, 0xFE, 0x07, 0x00, 0x00, 0xFE, 0x01, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 7
        0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x07, 0xE0, 0x07, 0xF8, 0x1F, 0xF8, 0x1F, 0xFC, 0x3F, 0xFC, 0x3F, 0xFE, 0x3F, 0xFC, 0x7F, 0xFE, 0x7F, 0xFE, 0xFF, 0x3F, 0x7E, 0x3E, 0xFC, 0x0F, 0xFC, 0x3F, 0xF8, 0x07, 0xF8, 0x1F, 0xF0, 0x07, 0xF8, 0x1F, 0xF0, 0x03, 0xF8, 0x1F, 0xE0, 0x03, 0xF8, 0x1F, 0xE0, 0x07, 0xF8, 0x1F, 0xF0, 0x07, 0xF8, 0x1F, 0xF8, 0x0F, 0xF8, 0x3F, 0xFC, 0x1F, 0x7C, 0xFE, 0xFF, 0x3F, 0x7E, 0xFE, 0x3F, 0xFF, 0x7F, 0xFC, 0x1F, 0xFE, 0x3F, 0xF8, 0x0F, 0xFE, 0x1F, 0xF0, 0x03, 0xF8, 0x0F, 0x00, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 8
        0x16, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0xE0, 0xFF, 0x00, 0x00, 0xF8, 0xFF, 0x03, 0x7C, 0xF8, 0xFF, 0x03, 0x7C, 0xFC, 0xFF, 0x07, 0x7C, 0xFE, 0xE0, 0x07, 0x7C, 0x3E, 0xC0, 0x0F, 0x7C, 0x3F, 0xC0, 0x0F, 0x7C, 0x1F, 0x80, 0x0F, 0x7C, 0x1F, 0x80, 0x0F, 0x7C, 0x1F, 0x80, 0x0F, 0x7C, 0x1F, 0x80, 0x0F, 0x3E, 0x1F, 0x80, 0x0F, 0x3E, 0x3F, 0xC0, 0x0F, 0x3F, 0x7F, 0xC0, 0x87, 0x1F, 0xFE, 0xC1, 0xE7, 0x1F, 0xFE, 0xFF, 0xFF, 0x0F, 0xFC, 0xFF, 0xFF, 0x07, 0xF8, 0xFF, 0xFF, 0x01, 0xE0, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 9
        0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0xFF, 0xFF, 0x01, 0xC0, 0xFF, 0xFF, 0x07, 0xE0, 0xFF, 0xFF, 0x0F, 0xF8, 0xFF, 0xFF, 0x1F, 0xF8, 0xFF, 0xFF, 0x3F, 0xFC, 0x07, 0xE0, 0x3F, 0xFE, 0x01, 0x80, 0x7F, 0x7E, 0x00, 0x00, 0x7E, 0x3E, 0x00, 0x00, 0xFC, 0x3F, 0x00, 0x00, 0xFC, 0x1F, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0x7C, 0x3E, 0x00, 0x00, 0x7C, 0x3E, 0x00, 0x00, 0x7C, 0x7C, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // Code for char C
	};

	struct Handler
	{
		static constexpr uint8_t height() { return 32; }
		static constexpr uint8_t width() { return 24; }
		static constexpr uint8_t characterBytesSize() { return 97; }

		static constexpr uint8_t width(char c)
		{
			if (c == '*')
				return width() - 4;

			return width() + 1;
		}

		static const flash<uint8_t>* dataForSymbol(char c)
		{
			switch (c)
			{
				case '-': return &data[0 * characterBytesSize()];
				case '*': return &data[1 * characterBytesSize()];
				case ' ': return &data[2 * characterBytesSize()];
				case '0': return &data[3 * characterBytesSize()];
				case '1': return &data[4 * characterBytesSize()];
				case '2': return &data[5 * characterBytesSize()];
				case '3': return &data[6 * characterBytesSize()];
				case '4': return &data[7 * characterBytesSize()];
				case '5': return &data[8 * characterBytesSize()];
				case '6': return &data[9 * characterBytesSize()];
				case '7': return &data[10 * characterBytesSize()];
				case '8': return &data[11 * characterBytesSize()];
				case '9': return &data[12 * characterBytesSize()];
				case 'C': return &data[13 * characterBytesSize()];
				default:
					return nullptr;
			}
		}
	};
};
